from typing import Any, Dict, List, Literal, Optional, Set, Tuple, Union

from upstash_redis.typing import FloatMinMaxT, GeoSearchResult

class Commands:
    def bitcount(
        self, key: str, start: Union[int, None] = None, end: Union[int, None] = None
    ) -> int: ...
    def bitfield(self, key: str) -> "BitFieldCommands": ...
    def bitfield_ro(self, key: str) -> "BitFieldROCommands": ...
    def bitop(
        self, operation: Literal["AND", "OR", "XOR", "NOT"], destkey: str, *keys: str
    ) -> int: ...
    def bitpos(
        self,
        key: str,
        bit: Literal[0, 1],
        start: Union[int, None] = None,
        end: Union[int, None] = None,
    ) -> int: ...
    def getbit(self, key: str, offset: int) -> Literal[0, 1]: ...
    def setbit(self, key: str, offset: int, value: Literal[0, 1]) -> int: ...
    def ping(self, message: Union[str, None] = None) -> str: ...
    def echo(self, message: str) -> str: ...
    def copy(self, source: str, destination: str, replace: bool = False) -> bool: ...
    def delete(self, *keys: str) -> int: ...
    def exists(self, *keys: str) -> int: ...
    def expire(self, key: str, seconds: int) -> bool: ...
    def expireat(self, key: str, unix_time_seconds: int) -> bool: ...
    def keys(self, pattern: str) -> List[str]: ...
    def persist(self, key: str) -> bool: ...
    def pexpire(self, key: str, milliseconds: int) -> bool: ...
    def pexpireat(self, key: str, unix_time_milliseconds: int) -> bool: ...
    def pttl(self, key: str) -> int: ...
    def randomkey(self) -> Union[str, None]: ...
    def rename(self, key: str, newkey: str) -> bool: ...
    def renamenx(self, key: str, newkey: str) -> bool: ...
    def scan(
        self,
        cursor: int,
        match: Union[str, None] = None,
        count: Union[int, None] = None,
        type: Union[str, None] = None,
    ) -> Tuple[int, List[str]]: ...
    def touch(self, *keys: str) -> int: ...
    def ttl(self, key: str) -> int: ...
    def type(self, key: str) -> Union[str, None]: ...
    def unlink(self, *keys: str) -> int: ...
    def geoadd(
        self,
        key: str,
        *members: Tuple[float, float, str],
        nx: bool = False,
        xx: bool = False,
        ch: bool = False,
    ) -> int: ...
    def geodist(
        self,
        key: str,
        member1: str,
        member2: str,
        unit: Literal["M", "KM", "FT", "MI"] = "M",
    ) -> Union[float, None]: ...
    def geohash(self, key: str, *members: str) -> List[Union[str, None]]: ...
    def geopos(
        self, key: str, *members: str
    ) -> List[Union[Tuple[float, float], None]]: ...
    def georadius(
        self,
        key: str,
        longitude: float,
        latitude: float,
        radius: float,
        unit: Literal["M", "KM", "FT", "MI"],
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
        count: Union[int, None] = None,
        any: bool = False,
        order: Union[Literal["ASC", "DESC"], None] = None,
        store: Union[str, None] = None,
        storedist: Union[str, None] = None,
    ) -> Union[List[Union[str, GeoSearchResult]], int]: ...
    def georadius_ro(
        self,
        key: str,
        longitude: float,
        latitude: float,
        radius: float,
        unit: Literal["M", "KM", "FT", "MI"],
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
        count: Union[int, None] = None,
        any: bool = False,
        order: Union[Literal["ASC", "DESC"], None] = None,
    ) -> List[Union[str, GeoSearchResult]]: ...
    def georadiusbymember(
        self,
        key: str,
        member: str,
        radius: float,
        unit: Literal["M", "KM", "FT", "MI"],
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
        count: Union[int, None] = None,
        any: bool = False,
        order: Union[Literal["ASC", "DESC"], None] = None,
        store: Union[str, None] = None,
        storedist: Union[str, None] = None,
    ) -> Union[List[Union[str, GeoSearchResult]], int]: ...
    def georadiusbymember_ro(
        self,
        key: str,
        member: str,
        radius: float,
        unit: Literal["M", "KM", "FT", "MI"],
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
        count: Union[int, None] = None,
        any: bool = False,
        order: Union[Literal["ASC", "DESC"], None] = None,
    ) -> List[Union[str, GeoSearchResult]]: ...
    def geosearch(
        self,
        key: str,
        unit: Literal["M", "KM", "FT", "MI"],
        member: Union[str, None] = None,
        longitude: Union[float, None] = None,
        latitude: Union[float, None] = None,
        radius: Union[float, None] = None,
        width: Union[float, None] = None,
        height: Union[float, None] = None,
        order: Union[Literal["ASC", "DESC"], None] = None,
        count: Union[int, None] = None,
        any: bool = False,
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
    ) -> List[Union[str, GeoSearchResult]]: ...
    def geosearchstore(
        self,
        destination: str,
        source: str,
        member: Union[str, None] = None,
        longitude: Union[float, None] = None,
        latitude: Union[float, None] = None,
        unit: Literal["M", "KM", "FT", "MI"] = "M",
        radius: Union[float, None] = None,
        width: Union[float, None] = None,
        height: Union[float, None] = None,
        order: Union[Literal["ASC", "DESC"], None] = None,
        count: Union[int, None] = None,
        any: bool = False,
        storedist: bool = False,
    ) -> int: ...
    def hdel(self, key: str, *fields: str) -> int: ...
    def hexists(self, key: str, field: str) -> bool: ...
    def hget(self, key: str, field: str) -> Union[str, None]: ...
    def hgetall(self, key: str) -> Dict[str, str]: ...
    def hincrby(self, key: str, field: str, increment: int) -> int: ...
    def hincrbyfloat(self, key: str, field: str, increment: float) -> float: ...
    def hkeys(self, key: str) -> List[str]: ...
    def hlen(self, key: str) -> int: ...
    def hmget(self, key: str, *fields: str) -> List[Union[str, None]]: ...
    def hmset(self, key: str, values: Dict[str, str]) -> bool: ...
    def hrandfield(
        self, key: str, count: Union[int, None] = None, withvalues: bool = False
    ) -> Union[str, None, List[str], Dict[str, str]]: ...
    def hscan(
        self,
        key: str,
        cursor: int,
        match: Union[str, None] = None,
        count: Union[int, None] = None,
    ) -> Tuple[int, Dict[str, str]]: ...
    def hset(
        self,
        key: str,
        field: Optional[str] = None,
        value: Optional[str] = None,
        values: Optional[Dict[str, str]] = None,
    ) -> int: ...
    def hsetnx(self, key: str, field: str, value: str) -> bool: ...
    def hstrlen(self, key: str, field: str) -> int: ...
    def hvals(self, key: str) -> List[str]: ...
    def pfadd(self, key: str, *elements: Any) -> bool: ...
    def pfcount(self, *keys: str) -> int: ...
    def pfmerge(self, destkey: str, *sourcekeys: str) -> bool: ...
    def lindex(self, key: str, index: int) -> Union[str, None]: ...
    def linsert(
        self,
        key: str,
        where: Literal["BEFORE", "AFTER"],
        pivot: str,
        element: str,
    ) -> int: ...
    def llen(self, key: str) -> int: ...
    def lmove(
        self,
        source: str,
        destination: str,
        wherefrom: Literal["LEFT", "RIGHT"] = "LEFT",
        whereto: Literal["LEFT", "RIGHT"] = "RIGHT",
    ) -> Union[str, None]: ...
    def lpop(
        self, key: str, count: Union[int, None] = None
    ) -> Union[str, List[str], None]: ...
    def lpos(
        self,
        key: str,
        element: str,
        rank: Union[int, None] = None,
        count: Union[int, None] = None,
        maxlen: Union[int, None] = None,
    ) -> Union[(Union[int, None]), List[int]]: ...
    def lpush(self, key: str, *elements: str) -> int: ...
    def lpushx(self, key: str, *elements: str) -> int: ...
    def lrange(self, key: str, start: int, stop: int) -> List[str]: ...
    def lrem(self, key: str, count: int, element: str) -> int: ...
    def lset(self, key: str, index: int, element: str) -> bool: ...
    def ltrim(self, key: str, start: int, stop: int) -> str: ...
    def rpop(
        self, key: str, count: Union[int, None] = None
    ) -> Union[str, List[str], None]: ...
    def rpoplpush(self, source: str, destination: str) -> Union[str, None]: ...
    def rpush(self, key: str, *elements: str) -> int: ...
    def rpushx(self, key: str, *elements: str) -> int: ...
    def publish(self, channel: str, message: str) -> int: ...
    def eval(
        self,
        script: str,
        keys: Union[List[str], None] = None,
        args: Union[List, None] = None,
    ) -> Any: ...
    def evalsha(
        self,
        sha1: str,
        keys: Union[List[str], None] = None,
        args: Union[List, None] = None,
    ) -> Any: ...
    def dbsize(self) -> int: ...
    def flushall(
        self, flush_type: Union[Literal["ASYNC", "SYNC"], None] = None
    ) -> bool: ...
    def flushdb(
        self, flush_type: Union[Literal["ASYNC", "SYNC"], None] = None
    ) -> bool: ...
    def time(self) -> Tuple[int, int]: ...
    def sadd(self, key: str, *members: str) -> int: ...
    def scard(self, key: str) -> int: ...
    def sdiff(self, *keys: str) -> Set[str]: ...
    def sdiffstore(self, destination: str, *keys: str) -> int: ...
    def sinter(self, *keys: str) -> Set[str]: ...
    def sinterstore(self, destination: str, *keys: str) -> int: ...
    def sismember(self, key: str, member: str) -> bool: ...
    def smismember(self, key: str, *members: str) -> List[bool]: ...
    def smembers(self, key: str) -> Set[str]: ...
    def smove(self, source: str, destination: str, member: str) -> bool: ...
    def spop(
        self, key: str, count: Union[int, None] = None
    ) -> Union[str, List[str], None]: ...
    def srandmember(
        self, key: str, count: Union[int, None] = None
    ) -> Union[str, List[str], None]: ...
    def srem(self, key: str, *members: str) -> int: ...
    def sscan(
        self,
        key: str,
        cursor: int = 0,
        match: Union[str, None] = None,
        count: Union[int, None] = None,
    ) -> Tuple[int, List[str]]: ...
    def sunion(self, *keys: str) -> Set[str]: ...
    def sunionstore(self, destination: str, *keys: str) -> int: ...
    def zadd(
        self,
        key: str,
        scores: Dict[str, float],
        nx: bool = False,
        xx: bool = False,
        gt: bool = False,
        lt: bool = False,
        ch: bool = False,
        incr: bool = False,
    ) -> Union[int, float, None]: ...
    def zcard(self, key: str) -> int: ...
    def zcount(self, key: str, min: FloatMinMaxT, max: FloatMinMaxT) -> int: ...
    def zdiff(
        self, keys: List[str], withscores: bool = False
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    def zdiffstore(self, destination: str, keys: List[str]) -> int: ...
    def zincrby(self, key: str, increment: float, member: str) -> float: ...
    def zinter(
        self,
        keys: List[str],
        weights: Union[List[float], List[int], None] = None,
        aggregate: Union[Literal["SUM", "MIN", "MAX"], None] = None,
        withscores: bool = False,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    def zinterstore(
        self,
        destination: str,
        keys: List[str],
        weights: Union[List[float], List[int], None] = None,
        aggregate: Union[Literal["SUM", "MIN", "MAX"], None] = None,
    ) -> int: ...
    def zlexcount(self, key: str, min: str, max: str) -> int: ...
    def zmscore(self, key: str, members: List[str]) -> List[Union[float, None]]: ...
    def zpopmax(
        self, key: str, count: Union[int, None] = None
    ) -> List[Tuple[str, float]]: ...
    def zpopmin(
        self, key: str, count: Union[int, None] = None
    ) -> List[Tuple[str, float]]: ...
    def zrandmember(
        self, key: str, count: Union[int, None] = None, withscores: bool = False
    ) -> Union[str, None, List[str], List[Tuple[str, float]]]: ...
    def zrange(
        self,
        key: str,
        start: FloatMinMaxT,
        stop: FloatMinMaxT,
        sortby: Union[Literal["BYSCORE", "BYLEX"], None] = None,
        rev: bool = False,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
        withscores: bool = False,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    def zrangebylex(
        self,
        key: str,
        min: str,
        max: str,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> List[str]: ...
    def zrangebyscore(
        self,
        key: str,
        min: FloatMinMaxT,
        max: FloatMinMaxT,
        withscores: bool = False,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    def zrangestore(
        self,
        dst: str,
        src: str,
        min: FloatMinMaxT,
        max: FloatMinMaxT,
        sortby: Union[Literal["BYSCORE", "BYLEX"], None] = None,
        rev: bool = False,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> int: ...
    def zrank(self, key: str, member: str) -> Union[int, None]: ...
    def zrem(self, key: str, *members: str) -> int: ...
    def zremrangebylex(self, key: str, min: str, max: str) -> int: ...
    def zremrangebyrank(self, key: str, start: int, stop: int) -> int: ...
    def zremrangebyscore(
        self, key: str, min: FloatMinMaxT, max: FloatMinMaxT
    ) -> int: ...
    def zrevrange(
        self, key: str, start: int, stop: int, withscores: bool = False
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    def zrevrangebylex(
        self,
        key: str,
        max: str,
        min: str,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> List[str]: ...
    def zrevrangebyscore(
        self,
        key: str,
        max: FloatMinMaxT,
        min: FloatMinMaxT,
        withscores: bool = False,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    def zrevrank(self, key: str, member: str) -> Union[int, None]: ...
    def zscan(
        self,
        key: str,
        cursor: int,
        match: Union[str, None] = None,
        count: Union[int, None] = None,
    ) -> Tuple[int, List[Tuple[str, float]]]: ...
    def zscore(self, key: str, member: str) -> Union[float, None]: ...
    def zunion(
        self,
        keys: List[str],
        weights: Union[List[float], None] = None,
        aggregate: Union[Literal["SUM", "MIN", "MAX"], None] = None,
        withscores: bool = False,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    def zunionstore(
        self,
        destination: str,
        keys: List[str],
        weights: Union[List[float], None] = None,
        aggregate: Union[Literal["SUM", "MIN", "MAX"], None] = None,
    ) -> int: ...
    def append(self, key: str, value: str) -> int: ...
    def decr(self, key: str) -> int: ...
    def decrby(self, key: str, decrement: int) -> int: ...
    def get(self, key: str) -> Union[str, None]: ...
    def getdel(self, key: str) -> Union[str, None]: ...
    def getex(
        self,
        key: str,
        ex: Union[int, None] = None,
        px: Union[int, None] = None,
        exat: Union[int, None] = None,
        pxat: Union[int, None] = None,
        persist: Union[bool, None] = None,
    ) -> Union[str, None]: ...
    def getrange(self, key: str, start: int, end: int) -> str: ...
    def getset(self, key: str, value: str) -> Union[str, None]: ...
    def incr(self, key: str) -> int: ...
    def incrby(self, key: str, increment: int) -> int: ...
    def incrbyfloat(self, key: str, increment: float) -> float: ...
    def mget(self, *keys: str) -> List[Union[str, None]]: ...
    def mset(self, values: Dict[str, str]) -> Literal[True]: ...
    def msetnx(self, values: Dict[str, str]) -> bool: ...
    def psetex(self, key: str, milliseconds: int, value: str) -> Literal[True]: ...
    def set(
        self,
        key: str,
        value: Any,
        nx: bool = False,
        xx: bool = False,
        get: bool = False,
        ex: Union[int, None] = None,
        px: Union[int, None] = None,
        exat: Union[int, None] = None,
        pxat: Union[int, None] = None,
        keepttl: bool = False,
    ) -> Union[str, None]: ...
    def setex(self, key: str, seconds: int, value: str) -> Literal[True]: ...
    def setnx(self, key: str, value: str) -> bool: ...
    def setrange(self, key: str, offset: int, value: str) -> int: ...
    def strlen(self, key: str) -> int: ...
    def substr(self, key: str, start: int, end: int) -> str: ...
    def script_exists(self, *sha1: str) -> List[bool]: ...
    def script_flush(
        self, flush_type: Optional[Literal["ASYNC", "SYNC"]] = None
    ) -> bool: ...
    def script_load(self, script: str) -> str: ...

class AsyncCommands:
    def __init__(self): ...
    async def bitcount(
        self, key: str, start: Union[int, None] = None, end: Union[int, None] = None
    ) -> int: ...
    def bitfield(self, key: str) -> "AsyncBitFieldCommands": ...
    def bitfield_ro(self, key: str) -> "AsyncBitFieldROCommands": ...
    async def bitop(
        self, operation: Literal["AND", "OR", "XOR", "NOT"], destkey: str, *keys: str
    ) -> int: ...
    async def bitpos(
        self,
        key: str,
        bit: Literal[0, 1],
        start: Union[int, None] = None,
        end: Union[int, None] = None,
    ) -> int: ...
    async def getbit(self, key: str, offset: int) -> Literal[0, 1]: ...
    async def setbit(self, key: str, offset: int, value: Literal[0, 1]) -> int: ...
    async def ping(self, message: Union[str, None] = None) -> str: ...
    async def echo(self, message: str) -> str: ...
    async def copy(
        self, source: str, destination: str, replace: bool = False
    ) -> bool: ...
    async def delete(self, *keys: str) -> int: ...
    async def exists(self, *keys: str) -> int: ...
    async def expire(self, key: str, seconds: int) -> bool: ...
    async def expireat(self, key: str, unix_time_seconds: int) -> bool: ...
    async def keys(self, pattern: str) -> List[str]: ...
    async def persist(self, key: str) -> bool: ...
    async def pexpire(self, key: str, milliseconds: int) -> bool: ...
    async def pexpireat(self, key: str, unix_time_milliseconds: int) -> bool: ...
    async def pttl(self, key: str) -> int: ...
    async def randomkey(self) -> Union[str, None]: ...
    async def rename(self, key: str, newkey: str) -> bool: ...
    async def renamenx(self, key: str, newkey: str) -> bool: ...
    async def scan(
        self,
        cursor: int,
        match: Union[str, None] = None,
        count: Union[int, None] = None,
        type: Union[str, None] = None,
    ) -> Tuple[int, List[str]]: ...
    async def touch(self, *keys: str) -> int: ...
    async def ttl(self, key: str) -> int: ...
    async def type(self, key: str) -> Union[str, None]: ...
    async def unlink(self, *keys: str) -> int: ...
    async def geoadd(
        self,
        key: str,
        *members: Tuple[float, float, str],
        nx: bool = False,
        xx: bool = False,
        ch: bool = False,
    ) -> int: ...
    async def geodist(
        self,
        key: str,
        member1: str,
        member2: str,
        unit: Literal["M", "KM", "FT", "MI"] = "M",
    ) -> Union[float, None]: ...
    async def geohash(self, key: str, *members: str) -> List[Union[str, None]]: ...
    async def geopos(
        self, key: str, *members: str
    ) -> List[Union[Tuple[float, float], None]]: ...
    async def georadius(
        self,
        key: str,
        longitude: float,
        latitude: float,
        radius: float,
        unit: Literal["M", "KM", "FT", "MI"],
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
        count: Union[int, None] = None,
        any: bool = False,
        order: Union[Literal["ASC", "DESC"], None] = None,
        store: Union[str, None] = None,
        storedist: Union[str, None] = None,
    ) -> Union[List[Union[str, GeoSearchResult]], int]: ...
    async def georadius_ro(
        self,
        key: str,
        longitude: float,
        latitude: float,
        radius: float,
        unit: Literal["M", "KM", "FT", "MI"],
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
        count: Union[int, None] = None,
        any: bool = False,
        order: Union[Literal["ASC", "DESC"], None] = None,
    ) -> List[Union[str, GeoSearchResult]]: ...
    async def georadiusbymember(
        self,
        key: str,
        member: str,
        radius: float,
        unit: Literal["M", "KM", "FT", "MI"],
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
        count: Union[int, None] = None,
        any: bool = False,
        order: Union[Literal["ASC", "DESC"], None] = None,
        store: Union[str, None] = None,
        storedist: Union[str, None] = None,
    ) -> Union[List[Union[str, GeoSearchResult]], int]: ...
    async def georadiusbymember_ro(
        self,
        key: str,
        member: str,
        radius: float,
        unit: Literal["M", "KM", "FT", "MI"],
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
        count: Union[int, None] = None,
        any: bool = False,
        order: Union[Literal["ASC", "DESC"], None] = None,
    ) -> List[Union[str, GeoSearchResult]]: ...
    async def geosearch(
        self,
        key: str,
        unit: Literal["M", "KM", "FT", "MI"],
        member: Union[str, None] = None,
        longitude: Union[float, None] = None,
        latitude: Union[float, None] = None,
        radius: Union[float, None] = None,
        width: Union[float, None] = None,
        height: Union[float, None] = None,
        order: Union[Literal["ASC", "DESC"], None] = None,
        count: Union[int, None] = None,
        any: bool = False,
        withdist: bool = False,
        withhash: bool = False,
        withcoord: bool = False,
    ) -> List[Union[str, GeoSearchResult]]: ...
    async def geosearchstore(
        self,
        destination: str,
        source: str,
        member: Union[str, None] = None,
        longitude: Union[float, None] = None,
        latitude: Union[float, None] = None,
        unit: Literal["M", "KM", "FT", "MI"] = "M",
        radius: Union[float, None] = None,
        width: Union[float, None] = None,
        height: Union[float, None] = None,
        order: Union[Literal["ASC", "DESC"], None] = None,
        count: Union[int, None] = None,
        any: bool = False,
        storedist: bool = False,
    ) -> int: ...
    async def hdel(self, key: str, *fields: str) -> int: ...
    async def hexists(self, key: str, field: str) -> bool: ...
    async def hget(self, key: str, field: str) -> Union[str, None]: ...
    async def hgetall(self, key: str) -> Dict[str, str]: ...
    async def hincrby(self, key: str, field: str, increment: int) -> int: ...
    async def hincrbyfloat(self, key: str, field: str, increment: float) -> float: ...
    async def hkeys(self, key: str) -> List[str]: ...
    async def hlen(self, key: str) -> int: ...
    async def hmget(self, key: str, *fields: str) -> List[Union[str, None]]: ...
    async def hmset(self, key: str, values: Dict[str, str]) -> bool: ...
    async def hrandfield(
        self, key: str, count: Union[int, None] = None, withvalues: bool = False
    ) -> Union[str, None, List[str], Dict[str, str]]: ...
    async def hscan(
        self,
        key: str,
        cursor: int,
        match: Union[str, None] = None,
        count: Union[int, None] = None,
    ) -> Tuple[int, Dict[str, str]]: ...
    async def hset(
        self,
        key: str,
        field: Optional[str] = None,
        value: Optional[str] = None,
        values: Optional[Dict[str, str]] = None,
    ) -> int: ...
    async def hsetnx(self, key: str, field: str, value: str) -> bool: ...
    async def hstrlen(self, key: str, field: str) -> int: ...
    async def hvals(self, key: str) -> List[str]: ...
    async def pfadd(self, key: str, *elements: Any) -> bool: ...
    async def pfcount(self, *keys: str) -> int: ...
    async def pfmerge(self, destkey: str, *sourcekeys: str) -> bool: ...
    async def lindex(self, key: str, index: int) -> Union[str, None]: ...
    async def linsert(
        self,
        key: str,
        where: Literal["BEFORE", "AFTER"],
        pivot: str,
        element: str,
    ) -> int: ...
    async def llen(self, key: str) -> int: ...
    async def lmove(
        self,
        source: str,
        destination: str,
        wherefrom: Literal["LEFT", "RIGHT"] = "LEFT",
        whereto: Literal["LEFT", "RIGHT"] = "RIGHT",
    ) -> Union[str, None]: ...
    async def lpop(
        self, key: str, count: Union[int, None] = None
    ) -> Union[str, List[str], None]: ...
    async def lpos(
        self,
        key: str,
        element: str,
        rank: Union[int, None] = None,
        count: Union[int, None] = None,
        maxlen: Union[int, None] = None,
    ) -> Union[(Union[int, None]), List[int]]: ...
    async def lpush(self, key: str, *elements: str) -> int: ...
    async def lpushx(self, key: str, *elements: str) -> int: ...
    async def lrange(self, key: str, start: int, stop: int) -> List[str]: ...
    async def lrem(self, key: str, count: int, element: str) -> int: ...
    async def lset(self, key: str, index: int, element: str) -> bool: ...
    async def ltrim(self, key: str, start: int, stop: int) -> str: ...
    async def rpop(
        self, key: str, count: Union[int, None] = None
    ) -> Union[str, List[str], None]: ...
    async def rpoplpush(self, source: str, destination: str) -> Union[str, None]: ...
    async def rpush(self, key: str, *elements: str) -> int: ...
    async def rpushx(self, key: str, *elements: str) -> int: ...
    async def publish(self, channel: str, message: str) -> int: ...
    async def eval(
        self,
        script: str,
        keys: Union[List[str], None] = None,
        args: Union[List, None] = None,
    ) -> Any: ...
    async def evalsha(
        self,
        sha1: str,
        keys: Union[List[str], None] = None,
        args: Union[List, None] = None,
    ) -> Any: ...
    async def dbsize(self) -> int: ...
    async def flushall(
        self, flush_type: Union[Literal["ASYNC", "SYNC"], None] = None
    ) -> bool: ...
    async def flushdb(
        self, flush_type: Union[Literal["ASYNC", "SYNC"], None] = None
    ) -> bool: ...
    async def time(self) -> Tuple[int, int]: ...
    async def sadd(self, key: str, *members: str) -> int: ...
    async def scard(self, key: str) -> int: ...
    async def sdiff(self, *keys: str) -> Set[str]: ...
    async def sdiffstore(self, destination: str, *keys: str) -> int: ...
    async def sinter(self, *keys: str) -> Set[str]: ...
    async def sinterstore(self, destination: str, *keys: str) -> int: ...
    async def sismember(self, key: str, member: str) -> bool: ...
    async def smismember(self, key: str, *members: str) -> List[bool]: ...
    async def smembers(self, key: str) -> Set[str]: ...
    async def smove(self, source: str, destination: str, member: str) -> bool: ...
    async def spop(
        self, key: str, count: Union[int, None] = None
    ) -> Union[str, List[str], None]: ...
    async def srandmember(
        self, key: str, count: Union[int, None] = None
    ) -> Union[str, List[str], None]: ...
    async def srem(self, key: str, *members: str) -> int: ...
    async def sscan(
        self,
        key: str,
        cursor: int = 0,
        match: Union[str, None] = None,
        count: Union[int, None] = None,
    ) -> Tuple[int, List[str]]: ...
    async def sunion(self, *keys: str) -> Set[str]: ...
    async def sunionstore(self, destination: str, *keys: str) -> int: ...
    async def zadd(
        self,
        key: str,
        scores: Dict[str, float],
        nx: bool = False,
        xx: bool = False,
        gt: bool = False,
        lt: bool = False,
        ch: bool = False,
        incr: bool = False,
    ) -> Union[int, float, None]: ...
    async def zcard(self, key: str) -> int: ...
    async def zcount(self, key: str, min: FloatMinMaxT, max: FloatMinMaxT) -> int: ...
    async def zdiff(
        self, keys: List[str], withscores: bool = False
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    async def zdiffstore(self, destination: str, keys: List[str]) -> int: ...
    async def zincrby(self, key: str, increment: float, member: str) -> float: ...
    async def zinter(
        self,
        keys: List[str],
        weights: Union[List[float], List[int], None] = None,
        aggregate: Union[Literal["SUM", "MIN", "MAX"], None] = None,
        withscores: bool = False,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    async def zinterstore(
        self,
        destination: str,
        keys: List[str],
        weights: Union[List[float], List[int], None] = None,
        aggregate: Union[Literal["SUM", "MIN", "MAX"], None] = None,
    ) -> int: ...
    async def zlexcount(self, key: str, min: str, max: str) -> int: ...
    async def zmscore(
        self, key: str, members: List[str]
    ) -> List[Union[float, None]]: ...
    async def zpopmax(
        self, key: str, count: Union[int, None] = None
    ) -> List[Tuple[str, float]]: ...
    async def zpopmin(
        self, key: str, count: Union[int, None] = None
    ) -> List[Tuple[str, float]]: ...
    async def zrandmember(
        self, key: str, count: Union[int, None] = None, withscores: bool = False
    ) -> Union[str, None, List[str], List[Tuple[str, float]]]: ...
    async def zrange(
        self,
        key: str,
        start: FloatMinMaxT,
        stop: FloatMinMaxT,
        sortby: Union[Literal["BYSCORE", "BYLEX"], None] = None,
        rev: bool = False,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
        withscores: bool = False,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    async def zrangebylex(
        self,
        key: str,
        min: str,
        max: str,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> List[str]: ...
    async def zrangebyscore(
        self,
        key: str,
        min: FloatMinMaxT,
        max: FloatMinMaxT,
        withscores: bool = False,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    async def zrangestore(
        self,
        dst: str,
        src: str,
        min: FloatMinMaxT,
        max: FloatMinMaxT,
        sortby: Union[Literal["BYSCORE", "BYLEX"], None] = None,
        rev: bool = False,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> int: ...
    async def zrank(self, key: str, member: str) -> Union[int, None]: ...
    async def zrem(self, key: str, *members: str) -> int: ...
    async def zremrangebylex(self, key: str, min: str, max: str) -> int: ...
    async def zremrangebyrank(self, key: str, start: int, stop: int) -> int: ...
    async def zremrangebyscore(
        self, key: str, min: FloatMinMaxT, max: FloatMinMaxT
    ) -> int: ...
    async def zrevrange(
        self, key: str, start: int, stop: int, withscores: bool = False
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    async def zrevrangebylex(
        self,
        key: str,
        max: str,
        min: str,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> List[str]: ...
    async def zrevrangebyscore(
        self,
        key: str,
        max: FloatMinMaxT,
        min: FloatMinMaxT,
        withscores: bool = False,
        offset: Union[int, None] = None,
        count: Union[int, None] = None,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    async def zrevrank(self, key: str, member: str) -> Union[int, None]: ...
    async def zscan(
        self,
        key: str,
        cursor: int,
        match: Union[str, None] = None,
        count: Union[int, None] = None,
    ) -> Tuple[int, List[Tuple[str, float]]]: ...
    async def zscore(self, key: str, member: str) -> Union[float, None]: ...
    async def zunion(
        self,
        keys: List[str],
        weights: Union[List[float], None] = None,
        aggregate: Union[Literal["SUM", "MIN", "MAX"], None] = None,
        withscores: bool = False,
    ) -> Union[List[str], List[Tuple[str, float]]]: ...
    async def zunionstore(
        self,
        destination: str,
        keys: List[str],
        weights: Union[List[float], None] = None,
        aggregate: Union[Literal["SUM", "MIN", "MAX"], None] = None,
    ) -> int: ...
    async def append(self, key: str, value: str) -> int: ...
    async def decr(self, key: str) -> int: ...
    async def decrby(self, key: str, decrement: int) -> int: ...
    async def get(self, key: str) -> Union[str, None]: ...
    async def getdel(self, key: str) -> Union[str, None]: ...
    async def getex(
        self,
        key: str,
        ex: Union[int, None] = None,
        px: Union[int, None] = None,
        exat: Union[int, None] = None,
        pxat: Union[int, None] = None,
        persist: Union[bool, None] = None,
    ) -> Union[str, None]: ...
    async def getrange(self, key: str, start: int, end: int) -> str: ...
    async def getset(self, key: str, value: str) -> Union[str, None]: ...
    async def incr(self, key: str) -> int: ...
    async def incrby(self, key: str, increment: int) -> int: ...
    async def incrbyfloat(self, key: str, increment: float) -> float: ...
    async def mget(self, *keys: str) -> List[Union[str, None]]: ...
    async def mset(self, values: Dict[str, str]) -> Literal[True]: ...
    async def msetnx(self, values: Dict[str, str]) -> bool: ...
    async def psetex(
        self, key: str, milliseconds: int, value: str
    ) -> Literal[True]: ...
    async def set(
        self,
        key: str,
        value: Any,
        nx: bool = False,
        xx: bool = False,
        get: bool = False,
        ex: Union[int, None] = None,
        px: Union[int, None] = None,
        exat: Union[int, None] = None,
        pxat: Union[int, None] = None,
        keepttl: bool = False,
    ) -> Union[str, None]: ...
    async def setex(self, key: str, seconds: int, value: str) -> Literal[True]: ...
    async def setnx(self, key: str, value: str) -> bool: ...
    async def setrange(self, key: str, offset: int, value: str) -> int: ...
    async def strlen(self, key: str) -> int: ...
    async def substr(self, key: str, start: int, end: int) -> str: ...
    async def script_exists(self, *sha1: str) -> List[bool]: ...
    async def script_flush(
        self, flush_type: Optional[Literal["ASYNC", "SYNC"]] = None
    ) -> bool: ...
    async def script_load(self, script: str) -> str: ...

class BitFieldCommands:
    def __init__(self, client: Commands, key: str): ...
    def get(self, encoding: str, offset: Union[int, str]) -> "BitFieldCommands": ...
    def set(
        self, encoding: str, offset: Union[int, str], value: int
    ) -> "BitFieldCommands": ...
    def incrby(
        self, encoding: str, offset: Union[int, str], increment: int
    ) -> "BitFieldCommands": ...
    def overflow(
        self, overflow: Literal["WRAP", "SAT", "FAIL"]
    ) -> "BitFieldCommands": ...
    def execute(self) -> List: ...

class BitFieldROCommands:
    def __init__(self, client: Commands, key: str): ...
    def get(self, encoding: str, offset: Union[int, str]) -> "BitFieldROCommands": ...
    def execute(self) -> List: ...

class AsyncBitFieldCommands:
    def __init__(self, client: AsyncCommands, key: str): ...
    def get(
        self, encoding: str, offset: Union[int, str]
    ) -> "AsyncBitFieldCommands": ...
    def set(
        self, encoding: str, offset: Union[int, str], value: int
    ) -> "AsyncBitFieldCommands": ...
    def incrby(
        self, encoding: str, offset: Union[int, str], increment: int
    ) -> "AsyncBitFieldCommands": ...
    def overflow(
        self, overflow: Literal["WRAP", "SAT", "FAIL"]
    ) -> "AsyncBitFieldCommands": ...
    async def execute(self) -> List: ...

class AsyncBitFieldROCommands:
    def __init__(self, client: AsyncCommands, key: str): ...
    def get(
        self, encoding: str, offset: Union[int, str]
    ) -> "AsyncBitFieldROCommands": ...
    async def execute(self) -> List: ...
